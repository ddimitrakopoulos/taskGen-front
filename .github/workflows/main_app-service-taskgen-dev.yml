name: Build and deploy monolithic Node.js app to Azure Web App - app-service-taskGen-dev

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '~20'

      # 3Ô∏è‚É£ Install backend deps
      - name: Install root dependencies
        run: npm install

      # 4Ô∏è‚É£ Build frontend (inside ./frontend)
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          cd ..

      # 5Ô∏è‚É£ Confirm build output
      - name: Check dist folder
        run: ls -la frontend/dist

      # 6Ô∏è‚É£ Package everything (server + built frontend)
      - name: Package app for deployment
        run: zip -r monolith-app.zip . -x '*.git*' > /dev/null

      # 7Ô∏è‚É£ Upload artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: monolith-app
          path: monolith-app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1Ô∏è‚É£ Download build artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: monolith-app

      # 2Ô∏è‚É£ Azure login
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3Ô∏è‚É£ Deploy directly to Azure App Service
      - name: Deploy to Azure Web App
        run: |
          echo "üöÄ Starting deployment to Azure App Service..."
          set +e
          DEPLOY_OUTPUT=$(az webapp deploy \
            --name app-service-taskGen-dev \
            --resource-group rg-taskGen-dev-weu \
            --src-path monolith-app.zip \
            --type zip 2>&1)
          DEPLOY_EXIT_CODE=$?
          set -e

          echo "$DEPLOY_OUTPUT"

          if echo "$DEPLOY_OUTPUT" | grep -q "504"; then
            echo "‚ö†Ô∏è  Received 504 Gateway Timeout ‚Äî checking if deployment actually succeeded..."
          elif [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Deployment command failed (exit code $DEPLOY_EXIT_CODE)."
            exit 1
          fi

          echo "‚è≥ Polling Kudu for deployment status..."
          ATTEMPTS=0
          MAX_ATTEMPTS=20
          STATUS=""

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS=$(az rest \
              --method get \
              --uri "https://app-service-taskgen-dev.scm.azurewebsites.net/api/deployments/latest" \
              --query "status" -o tsv 2>/dev/null || echo "unknown")

            echo "üîç Attempt $((ATTEMPTS+1)) - Latest Kudu deployment status: ${STATUS}"

            if [ "$STATUS" = "4" ]; then
              echo "‚úÖ Deployment completed successfully!"
              exit 0
            elif [ "$STATUS" = "3" ]; then
              echo "‚ùå Deployment failed in Kudu!"
              exit 1
            fi

            ATTEMPTS=$((ATTEMPTS+1))
            sleep 15
          done

          echo "‚ö†Ô∏è  Deployment still running or unknown after $((MAX_ATTEMPTS*15)) seconds. Please check Kudu manually."
          exit 1





